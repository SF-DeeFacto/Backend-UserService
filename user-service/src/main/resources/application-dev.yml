# ========================================
# User Service 개발 환경 설정 파일
# ========================================
# 
# 개발 환경에서 사용되는 설정입니다.
# application.yml의 기본 설정을 오버라이드합니다.
# 
# 환경 변수 사용:
# - ${환경변수명}: 기본값 없이 환경 변수 사용
# - ${환경변수명:기본값}: 환경 변수가 없을 때 기본값 사용

# 서버 설정
server:
  # 서버 포트 (환경 변수에서 가져오거나 기본값 8081 사용)
  port: ${SERVER_PORT:8081}

spring:
  kafka:
    bootstrap-servers: localhost:9092
  datasource:
    url: jdbc:mysql://deefacto-rds-backend-prod.ctii4asq6dma.ap-northeast-2.rds.amazonaws.com:3306/deefacto-user?serverTimezone=UTC&useSSL=false&autoReconnect=true&useUnicode=true&characterEncoding=UTF-8
    username: admin
    password: deefacto6!
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-test-query: SELECT 1
      validation-timeout: 5000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 30000
      max-lifetime: 1800000
  
  # Redis 설정 (로그아웃 토큰 관리용)
  data:
    redis:
      # Redis 서버 호스트 (환경 변수에서 가져오거나 기본값 사용)
      host: ${REDIS_HOST:localhost}
      # Redis 서버 포트 (환경 변수에서 가져오거나 기본값 사용)
      port: ${REDIS_PORT:6379}

  # JPA (Java Persistence API) 설정
  jpa:
    # Hibernate 설정
    hibernate:
      # 데이터베이스 스키마 자동 생성 설정 (환경 변수에서 가져오거나 기본값 update 사용)
      # update: 엔티티 변경사항을 자동으로 데이터베이스에 반영
      # create: 애플리케이션 시작 시 테이블을 새로 생성 (기존 데이터 삭제)
      # validate: 엔티티와 데이터베이스 스키마 일치 여부만 검증
      # none: 자동 스키마 생성 비활성화
      ddl-auto: ${DEV_HIBERNATE_DDL_AUTO:update}
    
    # SQL 쿼리 로그 출력 설정 (환경 변수에서 가져오거나 기본값 true 사용)
    show-sql: ${DEV_SHOW_SQL:true}
    
    # Hibernate 추가 속성 설정
    properties:
      hibernate:
        # SQL 쿼리 포맷팅 설정 (환경 변수에서 가져오거나 기본값 true 사용)
        # 가독성을 위해 들여쓰기 적용
        format_sql: ${DEV_FORMAT_SQL:true}

# 로깅 설정 (개발 환경용)
logging:
  level:
    # 루트 로그 레벨 설정 (환경 변수에서 가져오거나 기본값 info 사용)
    root: ${LOGGING_LEVEL_ROOT:info}
    # Hibernate SQL 쿼리 로그 레벨 (debug: 상세한 쿼리 정보 출력)
    org.hibernate.SQL: debug
    # Hibernate 파라미터 바인딩 로그 레벨 (trace: 모든 파라미터 값 출력)
    org.hibernate.type: trace
    # User Service 패키지 로그 레벨 (환경 변수에서 가져오거나 기본값 debug 사용)
    # debug: 상세한 디버그 정보 출력
    com.deefacto.user_service: ${LOGGING_LEVEL_USER_SERVICE:debug}

# JWT 토큰 설정
jwt:
  # JWT 서명에 사용할 시크릿 키 (환경 변수에서 가져오거나 기본값 사용)
  # 실제 운영 환경에서는 환경 변수나 외부 설정으로 관리해야 함
  secret-key: ${JWT_SECRET_KEY_DEV:eW91ci1kZXYtc2VjcmV0LWtleS1oZXJlLW1pbmltdW0tMzItY2hhcmFjdGVycy1sb25n}
  
  # 리프레시 토큰 만료 시간 (환경 변수에서 가져오거나 기본값 86400초 사용)
  # 86400초 = 24시간
  exprires-in: ${JWT_REFRESH_TOKEN_EXPIRES_IN:86400}
  
  # 액세스 토큰 만료 시간 (환경 변수에서 가져오거나 기본값 900초 사용)
  # 900초 = 15분
  access-token-expires-in: ${JWT_ACCESS_TOKEN_EXPIRES_IN:900}

# Spring Boot Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized 